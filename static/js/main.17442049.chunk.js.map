{"version":3,"sources":["components/ToDoItem.js","components/Todos.js","components/AddTodo.js","components/pages/About.js","components/layout/Header.js","App.js","serviceWorker.js","index.js"],"names":["ToDoItem","getStyle","background","padding","borderBottom","textDecoration","_this","props","todo","completed","markDone","e","console","log","_this$props$todo","this","id","title","react_default","a","createElement","style","type","onChange","bind","btnStyle","onClick","delTodo","Component","color","border","borderRadius","cursor","float","Todos","_this2","todos","map","components_ToDoItem","key","AddTodo","state","setState","Object","defineProperty","target","name","value","onSubmit","preventDefault","addTodo","display","flex","placeholder","className","About","Fragment","LinkStyle","headerStyle","textAlign","Header","react_router_dom","to","App","uuid","v4","toConsumableArray","filter","newTodo","concat","ClassName","layout_Header","react_router","path","render","components_AddTodo","components_Todos","component","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.17442049.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass ToDoItem extends Component {\r\n  getStyle = () =>{\r\n    /*if(this.props.todo.completed){\r\n      return{\r\n        textDecoration: 'line-through'\r\n      }\r\n    }\r\n    else{\r\n      return{\r\n        textDecoration: 'bold'\r\n      }\r\n    }*/\r\n    return {\r\n      background: '#f6f4f4',\r\n      padding: '10px',\r\n      borderBottom: '1px #cc dotted',\r\n      textDecoration: this.props.todo.completed? 'line-through' : 'none'\r\n    }\r\n  }\r\n  markDone = (e) => {\r\n    console.log(this.props);\r\n  }\r\n  render() {\r\n    const { id, title } = this.props.todo;\r\n    return (\r\n      <div style = {this.getStyle()}>\r\n      <p>\r\n      <input type=\"checkbox\" onChange={this.props.markDone.bind(this, id)} /> {' '}\r\n       {title}\r\n       <button style ={btnStyle} onClick = {this.props.delTodo.bind(this, id)} >x</button>\r\n       </p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n//PropTypes\r\nToDoItem.propTypes = {\r\n  todo: PropTypes.object.isRequired\r\n}\r\n\r\nconst btnStyle = {\r\n  background: '#ff0000',\r\n  color: '#fff',\r\n  border: 'none',\r\n  padding: '5px 9px',\r\n  borderRadius: '50%',\r\n  cursor: 'pointer',\r\n  float: 'right'\r\n}\r\n\r\nexport default ToDoItem;\r\n","import React, { Component } from 'react';\r\nimport ToDoItem from './ToDoItem'\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Todos extends Component {\r\n  markDone = () =>{\r\n    console.log('hi');\r\n  }\r\n  render() {\r\n    console.log(this.props.todos)\r\n    return this.props.todos.map((todo)=>(\r\n\r\n      <ToDoItem key={todo.id} todo = {todo} markDone = {this.props.markDone}\r\n      delTodo = {this.props.delTodo}/>\r\n\r\n    ));\r\n  }\r\n}\r\n\r\n//PropTypes\r\nTodos.propTypes = {\r\n  todos: PropTypes.array.isRequired\r\n}\r\n\r\nexport default Todos;\r\n","import React, { Component } from 'react';\r\n\r\nclass AddTodo extends Component {\r\n  state = {\r\n    title: ''\r\n  }\r\n  \r\n  onChange = (e) => this.setState({ [e.target.name]: e.target.value });\r\n\r\n  onSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.addTodo(this.state.title);\r\n    this.setState( {title: '' });\r\n\r\n  }\r\n  render() {\r\n    return (\r\n      <form style={{ display: 'flex' }} onSubmit={this.onSubmit}>\r\n        <input\r\n           type = \"text\"\r\n           name = 'title'\r\n           style={{ flex: '10', padding: '5px'} }\r\n           placeholder =\"Add Todo ...\"\r\n           value={this.state.title}\r\n           onChange= {this.onChange} />\r\n        <input\r\n              type = \"submit\"\r\n              value = 'Submit'\r\n              className =\"btn\"\r\n              style={{flex: '1'}} />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default AddTodo;\r\n","import React from 'react'\r\n\r\nfunction About(){\r\n  return(\r\n    <React.Fragment>\r\n      <h1>About</h1>\r\n      <p>My first React App</p>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default About;\r\n","import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\n\r\nfunction Header(){\r\n  return (\r\n    <header style={headerStyle}>\r\n      <h1>TodoList</h1>\r\n      <Link to=\"/\" style={LinkStyle}>Home</Link> | <Link to=\"/about\" style={LinkStyle}>About</Link>\r\n    </header>\r\n  )\r\n}\r\n\r\nconst LinkStyle ={\r\ncolor: '#fff',\r\n\r\n}\r\nconst headerStyle = {\r\n  background: '#333',\r\n  color: '#fff',\r\n  textAlign: 'center',\r\n  padding: '10px'\r\n}\r\n\r\nexport default Header\r\n","//import React from 'react';\nimport React, { Component } from 'react';\nimport {BrowserRouter as Router, Route } from 'react-router-dom'\nimport Todos from './components/Todos';\nimport AddTodo from './components/AddTodo';\nimport About from './components/pages/About';\nimport Header from './components/layout/Header';\nimport uuid from 'uuid';\n\n\n\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    todos: [\n      {\n        id : uuid.v4(),\n        title: \"Boom\",\n        completed: false\n      },\n      {\n        id : uuid.v4(),\n        title: \"Booom Boom\",\n        completed: false\n      },\n      {\n        id : uuid.v4(),\n        title: \"Boom Yes Boom\",\n        completed: false\n      }\n    ]\n  }\n  //toggle complete method\n markDone = (id) => {\n   this.setState({ todos: this.state.todos.map(todo => {\n     if(todo.id === id){\n       todo.completed = !todo.completed\n     }\n     return todo;\n   })\n });\n }\n\n //delete Method\ndelTodo = (id) => {\n  console.log(id)\n  this.setState({ todos: [...this.state.todos.filter(todo => todo.id !== id)]});\n\n}\n\n//adding\naddTodo = (title) => {\n  console.log(title)\n  const newTodo = {\n    id: uuid.v4(),\n    title: title,\n    completed: false\n  }\n  this.setState({ todos: [...this.state.todos, newTodo] });\n}\n\n\n  render() {\n    //console.log(this.state.todos)\n    return(\n   <Router>\n    <div className=\"App\">\n      <div ClassName=\"container\">\n        <Header />\n        <Route path=\"/\" render= {props => (\n          <React.Fragment>\n              <AddTodo addTodo= {this.addTodo}/>\n              <h2> dd todo ggg todo </h2>\n              <Todos todos={this.state.todos}\n              markDone = {this.markDone} delTodo ={this.delTodo}/>\n          </React.Fragment>\n        )} />\n        <Route path=\"/about\"  component ={About} />\n\n      </div>\n    </div>\n    </Router>\n  );\n  }\n}\n/*\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>test </h1>\n\n    </div>\n  );\n}\n   */\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}